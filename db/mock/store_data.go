// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gunhachi/poke-blackmarket/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/gunhachi/poke-blackmarket/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddPokemonStockData mocks base method.
func (m *MockStore) AddPokemonStockData(arg0 context.Context, arg1 db.AddPokemonStockDataParams) (db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPokemonStockData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPokemonStockData indicates an expected call of AddPokemonStockData.
func (mr *MockStoreMockRecorder) AddPokemonStockData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPokemonStockData", reflect.TypeOf((*MockStore)(nil).AddPokemonStockData), arg0, arg1)
}

// CancelOrderTx mocks base method.
func (m *MockStore) CancelOrderTx(arg0 context.Context, arg1 db.CancelOrderParam) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderTx", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderTx indicates an expected call of CancelOrderTx.
func (mr *MockStoreMockRecorder) CancelOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderTx", reflect.TypeOf((*MockStore)(nil).CancelOrderTx), arg0, arg1)
}

// CancelPokemonOrderData mocks base method.
func (m *MockStore) CancelPokemonOrderData(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPokemonOrderData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPokemonOrderData indicates an expected call of CancelPokemonOrderData.
func (mr *MockStoreMockRecorder) CancelPokemonOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPokemonOrderData", reflect.TypeOf((*MockStore)(nil).CancelPokemonOrderData), arg0, arg1)
}

// CreateAccountLog mocks base method.
func (m *MockStore) CreateAccountLog(arg0 context.Context, arg1 db.CreateAccountLogParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountLog", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountLog indicates an expected call of CreateAccountLog.
func (mr *MockStoreMockRecorder) CreateAccountLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountLog", reflect.TypeOf((*MockStore)(nil).CreateAccountLog), arg0, arg1)
}

// CreatePokemonData mocks base method.
func (m *MockStore) CreatePokemonData(arg0 context.Context, arg1 db.CreatePokemonDataParams) (db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePokemonData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePokemonData indicates an expected call of CreatePokemonData.
func (mr *MockStoreMockRecorder) CreatePokemonData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePokemonData", reflect.TypeOf((*MockStore)(nil).CreatePokemonData), arg0, arg1)
}

// CreateUserAccount mocks base method.
func (m *MockStore) CreateUserAccount(arg0 context.Context, arg1 db.CreateUserAccountParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockStoreMockRecorder) CreateUserAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockStore)(nil).CreateUserAccount), arg0, arg1)
}

// DeductPokemonStockData mocks base method.
func (m *MockStore) DeductPokemonStockData(arg0 context.Context, arg1 db.DeductPokemonStockDataParams) (db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductPokemonStockData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductPokemonStockData indicates an expected call of DeductPokemonStockData.
func (mr *MockStoreMockRecorder) DeductPokemonStockData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductPokemonStockData", reflect.TypeOf((*MockStore)(nil).DeductPokemonStockData), arg0, arg1)
}

// DeleteUserAccount mocks base method.
func (m *MockStore) DeleteUserAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccount indicates an expected call of DeleteUserAccount.
func (mr *MockStoreMockRecorder) DeleteUserAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccount", reflect.TypeOf((*MockStore)(nil).DeleteUserAccount), arg0, arg1)
}

// GetAccountLog mocks base method.
func (m *MockStore) GetAccountLog(arg0 context.Context, arg1 string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountLog", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLog indicates an expected call of GetAccountLog.
func (mr *MockStoreMockRecorder) GetAccountLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLog", reflect.TypeOf((*MockStore)(nil).GetAccountLog), arg0, arg1)
}

// GetPokemonData mocks base method.
func (m *MockStore) GetPokemonData(arg0 context.Context, arg1 int64) (db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonData indicates an expected call of GetPokemonData.
func (mr *MockStoreMockRecorder) GetPokemonData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonData", reflect.TypeOf((*MockStore)(nil).GetPokemonData), arg0, arg1)
}

// GetPokemonOrderData mocks base method.
func (m *MockStore) GetPokemonOrderData(arg0 context.Context, arg1 int64) (db.PokeOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonOrderData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonOrderData indicates an expected call of GetPokemonOrderData.
func (mr *MockStoreMockRecorder) GetPokemonOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonOrderData", reflect.TypeOf((*MockStore)(nil).GetPokemonOrderData), arg0, arg1)
}

// GetUserAccount mocks base method.
func (m *MockStore) GetUserAccount(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccount", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccount indicates an expected call of GetUserAccount.
func (mr *MockStoreMockRecorder) GetUserAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccount", reflect.TypeOf((*MockStore)(nil).GetUserAccount), arg0, arg1)
}

// InsertPokemonOrderData mocks base method.
func (m *MockStore) InsertPokemonOrderData(arg0 context.Context, arg1 db.InsertPokemonOrderDataParams) (db.PokeOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPokemonOrderData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPokemonOrderData indicates an expected call of InsertPokemonOrderData.
func (mr *MockStoreMockRecorder) InsertPokemonOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPokemonOrderData", reflect.TypeOf((*MockStore)(nil).InsertPokemonOrderData), arg0, arg1)
}

// ListPokemonData mocks base method.
func (m *MockStore) ListPokemonData(arg0 context.Context, arg1 db.ListPokemonDataParams) ([]db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPokemonData", arg0, arg1)
	ret0, _ := ret[0].([]db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPokemonData indicates an expected call of ListPokemonData.
func (mr *MockStoreMockRecorder) ListPokemonData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPokemonData", reflect.TypeOf((*MockStore)(nil).ListPokemonData), arg0, arg1)
}

// ListPokemonOrderData mocks base method.
func (m *MockStore) ListPokemonOrderData(arg0 context.Context, arg1 db.ListPokemonOrderDataParams) ([]db.PokeOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPokemonOrderData", arg0, arg1)
	ret0, _ := ret[0].([]db.PokeOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPokemonOrderData indicates an expected call of ListPokemonOrderData.
func (mr *MockStoreMockRecorder) ListPokemonOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPokemonOrderData", reflect.TypeOf((*MockStore)(nil).ListPokemonOrderData), arg0, arg1)
}

// ListUserAccount mocks base method.
func (m *MockStore) ListUserAccount(arg0 context.Context, arg1 db.ListUserAccountParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAccount", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAccount indicates an expected call of ListUserAccount.
func (mr *MockStoreMockRecorder) ListUserAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAccount", reflect.TypeOf((*MockStore)(nil).ListUserAccount), arg0, arg1)
}

// OrderTx mocks base method.
func (m *MockStore) OrderTx(arg0 context.Context, arg1 db.OrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderTx indicates an expected call of OrderTx.
func (mr *MockStoreMockRecorder) OrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderTx", reflect.TypeOf((*MockStore)(nil).OrderTx), arg0, arg1)
}

// UpdatePokemonData mocks base method.
func (m *MockStore) UpdatePokemonData(arg0 context.Context, arg1 db.UpdatePokemonDataParams) (db.PokeProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePokemonData", arg0, arg1)
	ret0, _ := ret[0].(db.PokeProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePokemonData indicates an expected call of UpdatePokemonData.
func (mr *MockStoreMockRecorder) UpdatePokemonData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePokemonData", reflect.TypeOf((*MockStore)(nil).UpdatePokemonData), arg0, arg1)
}

// UpdateUserAccountRole mocks base method.
func (m *MockStore) UpdateUserAccountRole(arg0 context.Context, arg1 db.UpdateUserAccountRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccountRole", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAccountRole indicates an expected call of UpdateUserAccountRole.
func (mr *MockStoreMockRecorder) UpdateUserAccountRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccountRole", reflect.TypeOf((*MockStore)(nil).UpdateUserAccountRole), arg0, arg1)
}
