// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package db

import (
	"context"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO users (
	user_name,user_role
) VALUES (
	$1, $2
) RETURNING id, user_name, user_role, created_at
`

type CreateUserAccountParams struct {
	UserName string `json:"user_name"`
	UserRole string `json:"user_role"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount, arg.UserName, arg.UserRole)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserRole,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAccount, id)
	return err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, user_name, user_role, created_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserRole,
		&i.CreatedAt,
	)
	return i, err
}

const listUserAccount = `-- name: ListUserAccount :many
SELECT id, user_name, user_role, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUserAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAccount(ctx context.Context, arg ListUserAccountParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUserAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserRole,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccountRole = `-- name: UpdateUserAccountRole :one
UPDATE users
SET user_role = $2
WHERE id = $1
RETURNING id, user_name, user_role, created_at
`

type UpdateUserAccountRoleParams struct {
	ID       int64  `json:"id"`
	UserRole string `json:"user_role"`
}

func (q *Queries) UpdateUserAccountRole(ctx context.Context, arg UpdateUserAccountRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAccountRole, arg.ID, arg.UserRole)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserRole,
		&i.CreatedAt,
	)
	return i, err
}
