// Code generated by sqlc. DO NOT EDIT.
// source: poke_orders.sql

package db

import (
	"context"
)

const cancelPokemonOrderData = `-- name: CancelPokemonOrderData :exec
DELETE FROM poke_orders
WHERE id = $1
`

func (q *Queries) CancelPokemonOrderData(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, cancelPokemonOrderData, id)
	return err
}

const getPokemonOrderData = `-- name: GetPokemonOrderData :one
SELECT id, user_id, product_id, quantity, total_price, order_detail, created_at FROM poke_orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPokemonOrderData(ctx context.Context, id int64) (PokeOrder, error) {
	row := q.db.QueryRowContext(ctx, getPokemonOrderData, id)
	var i PokeOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.OrderDetail,
		&i.CreatedAt,
	)
	return i, err
}

const insertPokemonOrderData = `-- name: InsertPokemonOrderData :one
INSERT INTO poke_orders (
    user_id, product_id,quantity,total_price,order_detail
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, product_id, quantity, total_price, order_detail, created_at
`

type InsertPokemonOrderDataParams struct {
	UserID      int64  `json:"user_id"`
	ProductID   int64  `json:"product_id"`
	Quantity    int32  `json:"quantity"`
	TotalPrice  int64  `json:"total_price"`
	OrderDetail string `json:"order_detail"`
}

func (q *Queries) InsertPokemonOrderData(ctx context.Context, arg InsertPokemonOrderDataParams) (PokeOrder, error) {
	row := q.db.QueryRowContext(ctx, insertPokemonOrderData,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.TotalPrice,
		arg.OrderDetail,
	)
	var i PokeOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.OrderDetail,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderDetailedData = `-- name: ListOrderDetailedData :many
select poke_orders.id, users.user_name, poke_products.poke_name, poke_orders.quantity , poke_orders.total_price , poke_orders.order_detail 
FROM ((poke_orders
inner join users on poke_orders.user_id  = users.id)
inner join poke_products on poke_orders.product_id = poke_products.id)
order by id
limit $1
OFFSET $2
`

type ListOrderDetailedDataParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListOrderDetailedDataRow struct {
	ID          int64  `json:"id"`
	UserName    string `json:"user_name"`
	PokeName    string `json:"poke_name"`
	Quantity    int32  `json:"quantity"`
	TotalPrice  int64  `json:"total_price"`
	OrderDetail string `json:"order_detail"`
}

func (q *Queries) ListOrderDetailedData(ctx context.Context, arg ListOrderDetailedDataParams) ([]ListOrderDetailedDataRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetailedData, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderDetailedDataRow{}
	for rows.Next() {
		var i ListOrderDetailedDataRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.PokeName,
			&i.Quantity,
			&i.TotalPrice,
			&i.OrderDetail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPokemonOrderData = `-- name: ListPokemonOrderData :many
SELECT id, user_id, product_id, quantity, total_price, order_detail, created_at FROM poke_orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPokemonOrderDataParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// WHERE
//     user_id = $1 OR
//     product_id = $2
func (q *Queries) ListPokemonOrderData(ctx context.Context, arg ListPokemonOrderDataParams) ([]PokeOrder, error) {
	rows, err := q.db.QueryContext(ctx, listPokemonOrderData, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PokeOrder{}
	for rows.Next() {
		var i PokeOrder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.TotalPrice,
			&i.OrderDetail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
