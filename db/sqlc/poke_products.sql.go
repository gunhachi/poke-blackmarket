// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: poke_products.sql

package db

import (
	"context"
)

const addPokemonStockData = `-- name: AddPokemonStockData :one
UPDATE poke_products
SET poke_stock = poke_stock + $1
WHERE id = $2
RETURNING id, poke_name, status, poke_price, poke_stock, created_at
`

type AddPokemonStockDataParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddPokemonStockData(ctx context.Context, arg AddPokemonStockDataParams) (PokeProduct, error) {
	row := q.db.QueryRowContext(ctx, addPokemonStockData, arg.Amount, arg.ID)
	var i PokeProduct
	err := row.Scan(
		&i.ID,
		&i.PokeName,
		&i.Status,
		&i.PokePrice,
		&i.PokeStock,
		&i.CreatedAt,
	)
	return i, err
}

const createPokemonData = `-- name: CreatePokemonData :one
INSERT INTO poke_products (
    poke_name,status,poke_price,poke_stock
) VALUES (
	$1, $2, $3, $4
) RETURNING id, poke_name, status, poke_price, poke_stock, created_at
`

type CreatePokemonDataParams struct {
	PokeName  string `json:"poke_name"`
	Status    string `json:"status"`
	PokePrice int64  `json:"poke_price"`
	PokeStock int64  `json:"poke_stock"`
}

func (q *Queries) CreatePokemonData(ctx context.Context, arg CreatePokemonDataParams) (PokeProduct, error) {
	row := q.db.QueryRowContext(ctx, createPokemonData,
		arg.PokeName,
		arg.Status,
		arg.PokePrice,
		arg.PokeStock,
	)
	var i PokeProduct
	err := row.Scan(
		&i.ID,
		&i.PokeName,
		&i.Status,
		&i.PokePrice,
		&i.PokeStock,
		&i.CreatedAt,
	)
	return i, err
}

const deductPokemonStockData = `-- name: DeductPokemonStockData :one
UPDATE poke_products
SET poke_stock = poke_stock - $1
WHERE id = $2
RETURNING id, poke_name, status, poke_price, poke_stock, created_at
`

type DeductPokemonStockDataParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) DeductPokemonStockData(ctx context.Context, arg DeductPokemonStockDataParams) (PokeProduct, error) {
	row := q.db.QueryRowContext(ctx, deductPokemonStockData, arg.Amount, arg.ID)
	var i PokeProduct
	err := row.Scan(
		&i.ID,
		&i.PokeName,
		&i.Status,
		&i.PokePrice,
		&i.PokeStock,
		&i.CreatedAt,
	)
	return i, err
}

const getPokemonData = `-- name: GetPokemonData :one
SELECT id, poke_name, status, poke_price, poke_stock, created_at FROM poke_products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPokemonData(ctx context.Context, id int64) (PokeProduct, error) {
	row := q.db.QueryRowContext(ctx, getPokemonData, id)
	var i PokeProduct
	err := row.Scan(
		&i.ID,
		&i.PokeName,
		&i.Status,
		&i.PokePrice,
		&i.PokeStock,
		&i.CreatedAt,
	)
	return i, err
}
